{"filter":false,"title":"trying.py","tooltip":"/trying.py","undoManager":{"mark":6,"position":6,"stack":[[{"start":{"row":0,"column":0},"end":{"row":155,"column":54},"action":"insert","lines":["import math\t","\t","\tclass SVY21:","\t# Ref: http://www.linz.govt.nz/geodetic/conversion-coordinates/projection-conversions/transverse-mercator-preliminary-computations/index.aspx","\t","\t# WGS84 Datum","\ta = 6378137","\tf = 1 / 298.257223563","\t","\t# SVY21 Projection","\t# Fundamental point: Base 7 at Pierce Resevoir.","\t# Latitude: 1 22 02.9154 N, longitude: 103 49 31.9752 E (of Greenwich).","\t","\t# Known Issue: Setting (oLat, oLon) to the exact coordinates specified above","\t# results in computation being slightly off. The values below give the most","\t# accurate represenation of test data.","\toLat = 1.366666     # origin's lat in degrees","\toLon = 103.833333   # origin's lon in degrees","\toN = 38744.572      # false Northing","\toE = 28001.642      # false Easting","\tk = 1               # scale factor","\t","\tdef __init__(self):","\tself.b = self.a * (1 - self.f)","\tself.e2 = (2 * self.f) - (self.f * self.f)","\tself.e4 = self.e2 * self.e2","\tself.e6 = self.e4 * self.e2","\tself.A0 = 1 - (self.e2 / 4) - (3 * self.e4 / 64) - (5 * self.e6 / 256);","\tself.A2 = (3. / 8.) * (self.e2 + (self.e4 / 4) + (15 * self.e6 / 128));","\tself.A4 = (15. / 256.) * (self.e4 + (3 * self.e6 / 4));","\tself.A6 = 35 * self.e6 / 3072;","\t","\tdef computeSVY21(self, lat, lon):","\t\"\"\"","\tReturns a pair (N, E) representing Northings and Eastings in SVY21.","\t\"\"\"","\t","\tlatR = lat * math.pi / 180","\tsinLat = math.sin(latR)","\tsin2Lat = sinLat * sinLat","\tcosLat = math.cos(latR)","\tcos2Lat = cosLat * cosLat","\tcos3Lat = cos2Lat * cosLat","\tcos4Lat = cos3Lat * cosLat","\tcos5Lat = cos4Lat * cosLat","\tcos6Lat = cos5Lat * cosLat","\tcos7Lat = cos6Lat * cosLat","\t","\trho = self.calcRho(sin2Lat)","\tv = self.calcV(sin2Lat)","\tpsi = v / rho","\tt = math.tan(latR)","\tw = (lon - self.oLon) * math.pi / 180","\t","\tM = self.calcM(lat)","\tMo = self.calcM(self.oLat)","\t","\tw2 = w * w","\tw4 = w2 * w2","\tw6 = w4 * w2","\tw8 = w6 * w2","\t","\tpsi2 = psi * psi","\tpsi3 = psi2 * psi","\tpsi4 = psi3 * psi","\t","\tt2 = t * t","\tt4 = t2 * t2","\tt6 = t4 * t2","\t","\t# Compute Northing","\tnTerm1 = w2 / 2 * v * sinLat * cosLat","\tnTerm2 = w4 / 24 * v * sinLat * cos3Lat * (4 * psi2 + psi - t2)","\tnTerm3 = w6 / 720 * v * sinLat * cos5Lat * ((8 * psi4) * (11 - 24 * t2) - (28 * psi3) * (1 - 6 * t2) + psi2 * (1 - 32 * t2) - psi * 2 * t2 + t4)","\tnTerm4 = w8 / 40320 * v * sinLat * cos7Lat * (1385 - 3111 * t2 + 543 * t4 - t6)","\tN = self.oN + self.k * (M - Mo + nTerm1 + nTerm2 + nTerm3 + nTerm4)","\t","\t# Compute Easting","\teTerm1 = w2 / 6 * cos2Lat * (psi - t2)","\teTerm2 = w4 / 120 * cos4Lat * ((4 * psi3) * (1 - 6 * t2) + psi2 * (1 + 8 * t2) - psi * 2 * t2 + t4)","\teTerm3 = w6 / 5040 * cos6Lat * (61 - 479 * t2 + 179 * t4 - t6)","\tE = self.oE + self.k * v * w * cosLat * (1 + eTerm1 + eTerm2 + eTerm3)","\t","\treturn (N, E)","\t","\tdef calcM(self, lat):","\tlatR = lat * math.pi / 180","\treturn self.a * ((self.A0 * latR) - (self.A2 * math.sin(2 * latR)) + (self.A4 * math.sin(4 * latR)) - (self.A6 * math.sin(6 * latR)))","\t","\tdef calcRho(self, sin2Lat):","\tnum = self.a * (1 - self.e2)","\tdenom = math.pow(1 - self.e2 * sin2Lat, 3. / 2.)","\treturn num / denom","\t","\tdef calcV(self, sin2Lat):","\tpoly = 1 - self.e2 * sin2Lat","\treturn self.a / math.sqrt(poly)","\t","\tdef computeLatLon(self, N, E):","\t\"\"\"","\tReturns a pair (lat, lon) representing Latitude and Longitude.","\t\"\"\"","\t","\tNprime = N - self.oN","\tMo = self.calcM(self.oLat)","\tMprime = Mo + (Nprime / self.k)","\tn = (self.a - self.b) / (self.a + self.b)","\tn2 = n * n","\tn3 = n2 * n","\tn4 = n2 * n2","\tG = self.a * (1 - n) * (1 - n2) * (1 + (9 * n2 / 4) + (225 * n4 / 64)) * (math.pi / 180)","\tsigma = (Mprime * math.pi) / (180. * G)","\t","\tlatPrimeT1 = ((3 * n / 2) - (27 * n3 / 32)) * math.sin(2 * sigma)","\tlatPrimeT2 = ((21 * n2 / 16) - (55 * n4 / 32)) * math.sin(4 * sigma)","\tlatPrimeT3 = (151 * n3 / 96) * math.sin(6 * sigma)","\tlatPrimeT4 = (1097 * n4 / 512) * math.sin(8 * sigma)","\tlatPrime = sigma + latPrimeT1 + latPrimeT2 + latPrimeT3 + latPrimeT4","\t","\tsinLatPrime = math.sin(latPrime)","\tsin2LatPrime = sinLatPrime * sinLatPrime","\t","\trhoPrime = self.calcRho(sin2LatPrime)","\tvPrime = self.calcV(sin2LatPrime)","\tpsiPrime = vPrime / rhoPrime","\tpsiPrime2 = psiPrime * psiPrime","\tpsiPrime3 = psiPrime2 * psiPrime","\tpsiPrime4 = psiPrime3 * psiPrime","\ttPrime = math.tan(latPrime)","\ttPrime2 = tPrime * tPrime","\ttPrime4 = tPrime2 * tPrime2","\ttPrime6 = tPrime4 * tPrime2","\tEprime = E - self.oE","\tx = Eprime / (self.k * vPrime)","\tx2 = x * x","\tx3 = x2 * x","\tx5 = x3 * x2","\tx7 = x5 * x2","\t","\t# Compute Latitude","\tlatFactor = tPrime / (self.k * rhoPrime)","\tlatTerm1 = latFactor * ((Eprime * x) / 2)","\tlatTerm2 = latFactor * ((Eprime * x3) / 24) * ((-4 * psiPrime2) + (9 * psiPrime) * (1 - tPrime2) + (12 * tPrime2))","\tlatTerm3 = latFactor * ((Eprime * x5) / 720) * ((8 * psiPrime4) * (11 - 24 * tPrime2) - (12 * psiPrime3) * (21 - 71 * tPrime2) + (15 * psiPrime2) * (15 - 98 * tPrime2 + 15 * tPrime4) + (180 * psiPrime) * (5 * tPrime2 - 3 * tPrime4) + 360 * tPrime4)","\tlatTerm4 = latFactor * ((Eprime * x7) / 40320) * (1385 - 3633 * tPrime2 + 4095 * tPrime4 + 1575 * tPrime6)","\tlat = latPrime - latTerm1 + latTerm2 - latTerm3 + latTerm4","\t","\t# Compute Longitude","\tsecLatPrime = 1. / math.cos(lat)","\tlonTerm1 = x * secLatPrime","\tlonTerm2 = ((x3 * secLatPrime) / 6) * (psiPrime + 2 * tPrime2)","\tlonTerm3 = ((x5 * secLatPrime) / 120) * ((-4 * psiPrime3) * (1 - 6 * tPrime2) + psiPrime2 * (9 - 68 * tPrime2) + 72 * psiPrime * tPrime2 + 24 * tPrime4)","\tlonTerm4 = ((x7 * secLatPrime) / 5040) * (61 + 662 * tPrime2 + 1320 * tPrime4 + 720 * tPrime6)","\tlon = (self.oLon * math.pi / 180) + lonTerm1 - lonTerm2 + lonTerm3 - lonTerm4","\t","\treturn (lat / (math.pi / 180), lon / (math.pi / 180))"],"id":1}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":1},"action":"remove","lines":["\t"],"id":2},{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":4,"column":0},"end":{"row":4,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":5,"column":0},"end":{"row":5,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":6,"column":0},"end":{"row":6,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":7,"column":0},"end":{"row":7,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":8,"column":0},"end":{"row":8,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":9,"column":0},"end":{"row":9,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":10,"column":0},"end":{"row":10,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":11,"column":0},"end":{"row":11,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":12,"column":0},"end":{"row":12,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":13,"column":0},"end":{"row":13,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":14,"column":0},"end":{"row":14,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":15,"column":0},"end":{"row":15,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":16,"column":0},"end":{"row":16,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":17,"column":0},"end":{"row":17,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":18,"column":0},"end":{"row":18,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":19,"column":0},"end":{"row":19,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":20,"column":0},"end":{"row":20,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":21,"column":0},"end":{"row":21,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":22,"column":0},"end":{"row":22,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":23,"column":0},"end":{"row":23,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":24,"column":0},"end":{"row":24,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":25,"column":0},"end":{"row":25,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":26,"column":0},"end":{"row":26,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":27,"column":0},"end":{"row":27,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":28,"column":0},"end":{"row":28,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":29,"column":0},"end":{"row":29,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":30,"column":0},"end":{"row":30,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":31,"column":0},"end":{"row":31,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":32,"column":0},"end":{"row":32,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":33,"column":0},"end":{"row":33,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":34,"column":0},"end":{"row":34,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":35,"column":0},"end":{"row":35,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":36,"column":0},"end":{"row":36,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":37,"column":0},"end":{"row":37,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":38,"column":0},"end":{"row":38,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":39,"column":0},"end":{"row":39,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":40,"column":0},"end":{"row":40,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":41,"column":0},"end":{"row":41,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":42,"column":0},"end":{"row":42,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":43,"column":0},"end":{"row":43,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":44,"column":0},"end":{"row":44,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":45,"column":0},"end":{"row":45,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":46,"column":0},"end":{"row":46,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":47,"column":0},"end":{"row":47,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":48,"column":0},"end":{"row":48,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":49,"column":0},"end":{"row":49,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":50,"column":0},"end":{"row":50,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":51,"column":0},"end":{"row":51,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":52,"column":0},"end":{"row":52,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":53,"column":0},"end":{"row":53,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":54,"column":0},"end":{"row":54,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":55,"column":0},"end":{"row":55,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":56,"column":0},"end":{"row":56,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":57,"column":0},"end":{"row":57,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":58,"column":0},"end":{"row":58,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":59,"column":0},"end":{"row":59,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":60,"column":0},"end":{"row":60,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":61,"column":0},"end":{"row":61,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":62,"column":0},"end":{"row":62,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":63,"column":0},"end":{"row":63,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":64,"column":0},"end":{"row":64,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":65,"column":0},"end":{"row":65,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":66,"column":0},"end":{"row":66,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":67,"column":0},"end":{"row":67,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":68,"column":0},"end":{"row":68,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":69,"column":0},"end":{"row":69,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":70,"column":0},"end":{"row":70,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":71,"column":0},"end":{"row":71,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":72,"column":0},"end":{"row":72,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":73,"column":0},"end":{"row":73,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":74,"column":0},"end":{"row":74,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":75,"column":0},"end":{"row":75,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":76,"column":0},"end":{"row":76,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":77,"column":0},"end":{"row":77,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":78,"column":0},"end":{"row":78,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":79,"column":0},"end":{"row":79,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":80,"column":0},"end":{"row":80,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":81,"column":0},"end":{"row":81,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":82,"column":0},"end":{"row":82,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":83,"column":0},"end":{"row":83,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":84,"column":0},"end":{"row":84,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":85,"column":0},"end":{"row":85,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":86,"column":0},"end":{"row":86,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":87,"column":0},"end":{"row":87,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":88,"column":0},"end":{"row":88,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":89,"column":0},"end":{"row":89,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":90,"column":0},"end":{"row":90,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":91,"column":0},"end":{"row":91,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":92,"column":0},"end":{"row":92,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":93,"column":0},"end":{"row":93,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":94,"column":0},"end":{"row":94,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":95,"column":0},"end":{"row":95,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":96,"column":0},"end":{"row":96,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":97,"column":0},"end":{"row":97,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":98,"column":0},"end":{"row":98,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":99,"column":0},"end":{"row":99,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":100,"column":0},"end":{"row":100,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":101,"column":0},"end":{"row":101,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":102,"column":0},"end":{"row":102,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":103,"column":0},"end":{"row":103,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":104,"column":0},"end":{"row":104,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":105,"column":0},"end":{"row":105,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":106,"column":0},"end":{"row":106,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":107,"column":0},"end":{"row":107,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":108,"column":0},"end":{"row":108,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":109,"column":0},"end":{"row":109,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":110,"column":0},"end":{"row":110,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":111,"column":0},"end":{"row":111,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":112,"column":0},"end":{"row":112,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":113,"column":0},"end":{"row":113,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":114,"column":0},"end":{"row":114,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":115,"column":0},"end":{"row":115,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":116,"column":0},"end":{"row":116,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":117,"column":0},"end":{"row":117,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":118,"column":0},"end":{"row":118,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":119,"column":0},"end":{"row":119,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":120,"column":0},"end":{"row":120,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":121,"column":0},"end":{"row":121,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":122,"column":0},"end":{"row":122,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":123,"column":0},"end":{"row":123,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":124,"column":0},"end":{"row":124,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":125,"column":0},"end":{"row":125,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":126,"column":0},"end":{"row":126,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":127,"column":0},"end":{"row":127,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":128,"column":0},"end":{"row":128,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":129,"column":0},"end":{"row":129,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":130,"column":0},"end":{"row":130,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":131,"column":0},"end":{"row":131,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":132,"column":0},"end":{"row":132,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":133,"column":0},"end":{"row":133,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":134,"column":0},"end":{"row":134,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":135,"column":0},"end":{"row":135,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":136,"column":0},"end":{"row":136,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":137,"column":0},"end":{"row":137,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":138,"column":0},"end":{"row":138,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":139,"column":0},"end":{"row":139,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":140,"column":0},"end":{"row":140,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":141,"column":0},"end":{"row":141,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":142,"column":0},"end":{"row":142,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":143,"column":0},"end":{"row":143,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":144,"column":0},"end":{"row":144,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":145,"column":0},"end":{"row":145,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":146,"column":0},"end":{"row":146,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":147,"column":0},"end":{"row":147,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":148,"column":0},"end":{"row":148,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":149,"column":0},"end":{"row":149,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":150,"column":0},"end":{"row":150,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":151,"column":0},"end":{"row":151,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":152,"column":0},"end":{"row":152,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":153,"column":0},"end":{"row":153,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":154,"column":0},"end":{"row":154,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":155,"column":0},"end":{"row":155,"column":1},"action":"remove","lines":["\t"]}],[{"start":{"row":6,"column":0},"end":{"row":6,"column":4},"action":"insert","lines":["    "],"id":3},{"start":{"row":7,"column":0},"end":{"row":7,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":5,"column":0},"end":{"row":5,"column":4},"action":"insert","lines":["    "],"id":4}],[{"start":{"row":23,"column":0},"end":{"row":23,"column":4},"action":"insert","lines":["    "],"id":5},{"start":{"row":24,"column":0},"end":{"row":24,"column":4},"action":"insert","lines":["    "]},{"start":{"row":25,"column":0},"end":{"row":25,"column":4},"action":"insert","lines":["    "]},{"start":{"row":26,"column":0},"end":{"row":26,"column":4},"action":"insert","lines":["    "]},{"start":{"row":27,"column":0},"end":{"row":27,"column":4},"action":"insert","lines":["    "]},{"start":{"row":28,"column":0},"end":{"row":28,"column":4},"action":"insert","lines":["    "]},{"start":{"row":29,"column":0},"end":{"row":29,"column":4},"action":"insert","lines":["    "]},{"start":{"row":30,"column":0},"end":{"row":30,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":37,"column":0},"end":{"row":37,"column":4},"action":"insert","lines":["    "],"id":6},{"start":{"row":38,"column":0},"end":{"row":38,"column":4},"action":"insert","lines":["    "]},{"start":{"row":39,"column":0},"end":{"row":39,"column":4},"action":"insert","lines":["    "]},{"start":{"row":40,"column":0},"end":{"row":40,"column":4},"action":"insert","lines":["    "]},{"start":{"row":41,"column":0},"end":{"row":41,"column":4},"action":"insert","lines":["    "]},{"start":{"row":42,"column":0},"end":{"row":42,"column":4},"action":"insert","lines":["    "]},{"start":{"row":43,"column":0},"end":{"row":43,"column":4},"action":"insert","lines":["    "]},{"start":{"row":44,"column":0},"end":{"row":44,"column":4},"action":"insert","lines":["    "]},{"start":{"row":45,"column":0},"end":{"row":45,"column":4},"action":"insert","lines":["    "]},{"start":{"row":46,"column":0},"end":{"row":46,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":0,"column":0},"end":{"row":155,"column":53},"action":"remove","lines":["import math\t","\t","class SVY21:","# Ref: http://www.linz.govt.nz/geodetic/conversion-coordinates/projection-conversions/transverse-mercator-preliminary-computations/index.aspx","","    # WGS84 Datum","    a = 6378137","    f = 1 / 298.257223563","","# SVY21 Projection","# Fundamental point: Base 7 at Pierce Resevoir.","# Latitude: 1 22 02.9154 N, longitude: 103 49 31.9752 E (of Greenwich).","","# Known Issue: Setting (oLat, oLon) to the exact coordinates specified above","# results in computation being slightly off. The values below give the most","# accurate represenation of test data.","oLat = 1.366666     # origin's lat in degrees","oLon = 103.833333   # origin's lon in degrees","oN = 38744.572      # false Northing","oE = 28001.642      # false Easting","k = 1               # scale factor","","def __init__(self):","    self.b = self.a * (1 - self.f)","    self.e2 = (2 * self.f) - (self.f * self.f)","    self.e4 = self.e2 * self.e2","    self.e6 = self.e4 * self.e2","    self.A0 = 1 - (self.e2 / 4) - (3 * self.e4 / 64) - (5 * self.e6 / 256);","    self.A2 = (3. / 8.) * (self.e2 + (self.e4 / 4) + (15 * self.e6 / 128));","    self.A4 = (15. / 256.) * (self.e4 + (3 * self.e6 / 4));","    self.A6 = 35 * self.e6 / 3072;","","def computeSVY21(self, lat, lon):","\"\"\"","Returns a pair (N, E) representing Northings and Eastings in SVY21.","\"\"\"","","    latR = lat * math.pi / 180","    sinLat = math.sin(latR)","    sin2Lat = sinLat * sinLat","    cosLat = math.cos(latR)","    cos2Lat = cosLat * cosLat","    cos3Lat = cos2Lat * cosLat","    cos4Lat = cos3Lat * cosLat","    cos5Lat = cos4Lat * cosLat","    cos6Lat = cos5Lat * cosLat","    cos7Lat = cos6Lat * cosLat","","rho = self.calcRho(sin2Lat)","v = self.calcV(sin2Lat)","psi = v / rho","t = math.tan(latR)","w = (lon - self.oLon) * math.pi / 180","","M = self.calcM(lat)","Mo = self.calcM(self.oLat)","","w2 = w * w","w4 = w2 * w2","w6 = w4 * w2","w8 = w6 * w2","","psi2 = psi * psi","psi3 = psi2 * psi","psi4 = psi3 * psi","","t2 = t * t","t4 = t2 * t2","t6 = t4 * t2","","# Compute Northing","nTerm1 = w2 / 2 * v * sinLat * cosLat","nTerm2 = w4 / 24 * v * sinLat * cos3Lat * (4 * psi2 + psi - t2)","nTerm3 = w6 / 720 * v * sinLat * cos5Lat * ((8 * psi4) * (11 - 24 * t2) - (28 * psi3) * (1 - 6 * t2) + psi2 * (1 - 32 * t2) - psi * 2 * t2 + t4)","nTerm4 = w8 / 40320 * v * sinLat * cos7Lat * (1385 - 3111 * t2 + 543 * t4 - t6)","N = self.oN + self.k * (M - Mo + nTerm1 + nTerm2 + nTerm3 + nTerm4)","","# Compute Easting","eTerm1 = w2 / 6 * cos2Lat * (psi - t2)","eTerm2 = w4 / 120 * cos4Lat * ((4 * psi3) * (1 - 6 * t2) + psi2 * (1 + 8 * t2) - psi * 2 * t2 + t4)","eTerm3 = w6 / 5040 * cos6Lat * (61 - 479 * t2 + 179 * t4 - t6)","E = self.oE + self.k * v * w * cosLat * (1 + eTerm1 + eTerm2 + eTerm3)","","return (N, E)","","def calcM(self, lat):","latR = lat * math.pi / 180","return self.a * ((self.A0 * latR) - (self.A2 * math.sin(2 * latR)) + (self.A4 * math.sin(4 * latR)) - (self.A6 * math.sin(6 * latR)))","","def calcRho(self, sin2Lat):","num = self.a * (1 - self.e2)","denom = math.pow(1 - self.e2 * sin2Lat, 3. / 2.)","return num / denom","","def calcV(self, sin2Lat):","poly = 1 - self.e2 * sin2Lat","return self.a / math.sqrt(poly)","","def computeLatLon(self, N, E):","\"\"\"","Returns a pair (lat, lon) representing Latitude and Longitude.","\"\"\"","","Nprime = N - self.oN","Mo = self.calcM(self.oLat)","Mprime = Mo + (Nprime / self.k)","n = (self.a - self.b) / (self.a + self.b)","n2 = n * n","n3 = n2 * n","n4 = n2 * n2","G = self.a * (1 - n) * (1 - n2) * (1 + (9 * n2 / 4) + (225 * n4 / 64)) * (math.pi / 180)","sigma = (Mprime * math.pi) / (180. * G)","","latPrimeT1 = ((3 * n / 2) - (27 * n3 / 32)) * math.sin(2 * sigma)","latPrimeT2 = ((21 * n2 / 16) - (55 * n4 / 32)) * math.sin(4 * sigma)","latPrimeT3 = (151 * n3 / 96) * math.sin(6 * sigma)","latPrimeT4 = (1097 * n4 / 512) * math.sin(8 * sigma)","latPrime = sigma + latPrimeT1 + latPrimeT2 + latPrimeT3 + latPrimeT4","","sinLatPrime = math.sin(latPrime)","sin2LatPrime = sinLatPrime * sinLatPrime","","rhoPrime = self.calcRho(sin2LatPrime)","vPrime = self.calcV(sin2LatPrime)","psiPrime = vPrime / rhoPrime","psiPrime2 = psiPrime * psiPrime","psiPrime3 = psiPrime2 * psiPrime","psiPrime4 = psiPrime3 * psiPrime","tPrime = math.tan(latPrime)","tPrime2 = tPrime * tPrime","tPrime4 = tPrime2 * tPrime2","tPrime6 = tPrime4 * tPrime2","Eprime = E - self.oE","x = Eprime / (self.k * vPrime)","x2 = x * x","x3 = x2 * x","x5 = x3 * x2","x7 = x5 * x2","","# Compute Latitude","latFactor = tPrime / (self.k * rhoPrime)","latTerm1 = latFactor * ((Eprime * x) / 2)","latTerm2 = latFactor * ((Eprime * x3) / 24) * ((-4 * psiPrime2) + (9 * psiPrime) * (1 - tPrime2) + (12 * tPrime2))","latTerm3 = latFactor * ((Eprime * x5) / 720) * ((8 * psiPrime4) * (11 - 24 * tPrime2) - (12 * psiPrime3) * (21 - 71 * tPrime2) + (15 * psiPrime2) * (15 - 98 * tPrime2 + 15 * tPrime4) + (180 * psiPrime) * (5 * tPrime2 - 3 * tPrime4) + 360 * tPrime4)","latTerm4 = latFactor * ((Eprime * x7) / 40320) * (1385 - 3633 * tPrime2 + 4095 * tPrime4 + 1575 * tPrime6)","lat = latPrime - latTerm1 + latTerm2 - latTerm3 + latTerm4","","# Compute Longitude","secLatPrime = 1. / math.cos(lat)","lonTerm1 = x * secLatPrime","lonTerm2 = ((x3 * secLatPrime) / 6) * (psiPrime + 2 * tPrime2)","lonTerm3 = ((x5 * secLatPrime) / 120) * ((-4 * psiPrime3) * (1 - 6 * tPrime2) + psiPrime2 * (9 - 68 * tPrime2) + 72 * psiPrime * tPrime2 + 24 * tPrime4)","lonTerm4 = ((x7 * secLatPrime) / 5040) * (61 + 662 * tPrime2 + 1320 * tPrime4 + 720 * tPrime6)","lon = (self.oLon * math.pi / 180) + lonTerm1 - lonTerm2 + lonTerm3 - lonTerm4","","return (lat / (math.pi / 180), lon / (math.pi / 180))"],"id":7},{"start":{"row":0,"column":0},"end":{"row":155,"column":61},"action":"insert","lines":["import math","","class SVY21:","    # Ref: http://www.linz.govt.nz/geodetic/conversion-coordinates/projection-conversions/transverse-mercator-preliminary-computations/index.aspx","    ","    # WGS84 Datum","    a = 6378137","    f = 1 / 298.257223563","","    # SVY21 Projection","    # Fundamental point: Base 7 at Pierce Resevoir.","    # Latitude: 1 22 02.9154 N, longitude: 103 49 31.9752 E (of Greenwich).","","    # Known Issue: Setting (oLat, oLon) to the exact coordinates specified above","    # results in computation being slightly off. The values below give the most ","    # accurate represenation of test data.","    oLat = 1.366666     # origin's lat in degrees","    oLon = 103.833333   # origin's lon in degrees","    oN = 38744.572      # false Northing","    oE = 28001.642      # false Easting","    k = 1               # scale factor","","    def __init__(self):","        self.b = self.a * (1 - self.f)","        self.e2 = (2 * self.f) - (self.f * self.f)","        self.e4 = self.e2 * self.e2","        self.e6 = self.e4 * self.e2","        self.A0 = 1 - (self.e2 / 4) - (3 * self.e4 / 64) - (5 * self.e6 / 256);","        self.A2 = (3. / 8.) * (self.e2 + (self.e4 / 4) + (15 * self.e6 / 128));","        self.A4 = (15. / 256.) * (self.e4 + (3 * self.e6 / 4));","        self.A6 = 35 * self.e6 / 3072;","","    def computeSVY21(self, lat, lon):","        \"\"\"","        Returns a pair (N, E) representing Northings and Eastings in SVY21.","        \"\"\"","","        latR = lat * math.pi / 180","        sinLat = math.sin(latR)","        sin2Lat = sinLat * sinLat","        cosLat = math.cos(latR)","        cos2Lat = cosLat * cosLat","        cos3Lat = cos2Lat * cosLat","        cos4Lat = cos3Lat * cosLat","        cos5Lat = cos4Lat * cosLat","        cos6Lat = cos5Lat * cosLat","        cos7Lat = cos6Lat * cosLat","","        rho = self.calcRho(sin2Lat)","        v = self.calcV(sin2Lat)","        psi = v / rho","        t = math.tan(latR)","        w = (lon - self.oLon) * math.pi / 180","","        M = self.calcM(lat)","        Mo = self.calcM(self.oLat)","","        w2 = w * w","        w4 = w2 * w2","        w6 = w4 * w2","        w8 = w6 * w2","","        psi2 = psi * psi","        psi3 = psi2 * psi","        psi4 = psi3 * psi","","        t2 = t * t","        t4 = t2 * t2","        t6 = t4 * t2","","        # Compute Northing","        nTerm1 = w2 / 2 * v * sinLat * cosLat","        nTerm2 = w4 / 24 * v * sinLat * cos3Lat * (4 * psi2 + psi - t2)","        nTerm3 = w6 / 720 * v * sinLat * cos5Lat * ((8 * psi4) * (11 - 24 * t2) - (28 * psi3) * (1 - 6 * t2) + psi2 * (1 - 32 * t2) - psi * 2 * t2 + t4)","        nTerm4 = w8 / 40320 * v * sinLat * cos7Lat * (1385 - 3111 * t2 + 543 * t4 - t6)","        N = self.oN + self.k * (M - Mo + nTerm1 + nTerm2 + nTerm3 + nTerm4)","","        # Compute Easting","        eTerm1 = w2 / 6 * cos2Lat * (psi - t2)","        eTerm2 = w4 / 120 * cos4Lat * ((4 * psi3) * (1 - 6 * t2) + psi2 * (1 + 8 * t2) - psi * 2 * t2 + t4)","        eTerm3 = w6 / 5040 * cos6Lat * (61 - 479 * t2 + 179 * t4 - t6)","        E = self.oE + self.k * v * w * cosLat * (1 + eTerm1 + eTerm2 + eTerm3)","","        return (N, E)","","    def calcM(self, lat):","        latR = lat * math.pi / 180","        return self.a * ((self.A0 * latR) - (self.A2 * math.sin(2 * latR)) + (self.A4 * math.sin(4 * latR)) - (self.A6 * math.sin(6 * latR)))","","    def calcRho(self, sin2Lat):","        num = self.a * (1 - self.e2)","        denom = math.pow(1 - self.e2 * sin2Lat, 3. / 2.)","        return num / denom","","    def calcV(self, sin2Lat):","        poly = 1 - self.e2 * sin2Lat","        return self.a / math.sqrt(poly)","","    def computeLatLon(self, N, E):","        \"\"\"","        Returns a pair (lat, lon) representing Latitude and Longitude.","        \"\"\"","","        Nprime = N - self.oN","        Mo = self.calcM(self.oLat)","        Mprime = Mo + (Nprime / self.k)","        n = (self.a - self.b) / (self.a + self.b)","        n2 = n * n","        n3 = n2 * n","        n4 = n2 * n2","        G = self.a * (1 - n) * (1 - n2) * (1 + (9 * n2 / 4) + (225 * n4 / 64)) * (math.pi / 180)","        sigma = (Mprime * math.pi) / (180. * G)","        ","        latPrimeT1 = ((3 * n / 2) - (27 * n3 / 32)) * math.sin(2 * sigma)","        latPrimeT2 = ((21 * n2 / 16) - (55 * n4 / 32)) * math.sin(4 * sigma)","        latPrimeT3 = (151 * n3 / 96) * math.sin(6 * sigma)","        latPrimeT4 = (1097 * n4 / 512) * math.sin(8 * sigma)","        latPrime = sigma + latPrimeT1 + latPrimeT2 + latPrimeT3 + latPrimeT4","","        sinLatPrime = math.sin(latPrime)","        sin2LatPrime = sinLatPrime * sinLatPrime","","        rhoPrime = self.calcRho(sin2LatPrime)","        vPrime = self.calcV(sin2LatPrime)","        psiPrime = vPrime / rhoPrime","        psiPrime2 = psiPrime * psiPrime","        psiPrime3 = psiPrime2 * psiPrime","        psiPrime4 = psiPrime3 * psiPrime","        tPrime = math.tan(latPrime)","        tPrime2 = tPrime * tPrime","        tPrime4 = tPrime2 * tPrime2","        tPrime6 = tPrime4 * tPrime2","        Eprime = E - self.oE","        x = Eprime / (self.k * vPrime)","        x2 = x * x","        x3 = x2 * x","        x5 = x3 * x2","        x7 = x5 * x2","","        # Compute Latitude","        latFactor = tPrime / (self.k * rhoPrime)","        latTerm1 = latFactor * ((Eprime * x) / 2)","        latTerm2 = latFactor * ((Eprime * x3) / 24) * ((-4 * psiPrime2) + (9 * psiPrime) * (1 - tPrime2) + (12 * tPrime2))","        latTerm3 = latFactor * ((Eprime * x5) / 720) * ((8 * psiPrime4) * (11 - 24 * tPrime2) - (12 * psiPrime3) * (21 - 71 * tPrime2) + (15 * psiPrime2) * (15 - 98 * tPrime2 + 15 * tPrime4) + (180 * psiPrime) * (5 * tPrime2 - 3 * tPrime4) + 360 * tPrime4)","        latTerm4 = latFactor * ((Eprime * x7) / 40320) * (1385 - 3633 * tPrime2 + 4095 * tPrime4 + 1575 * tPrime6)","        lat = latPrime - latTerm1 + latTerm2 - latTerm3 + latTerm4","","        # Compute Longitude","        secLatPrime = 1. / math.cos(lat)","        lonTerm1 = x * secLatPrime","        lonTerm2 = ((x3 * secLatPrime) / 6) * (psiPrime + 2 * tPrime2)","        lonTerm3 = ((x5 * secLatPrime) / 120) * ((-4 * psiPrime3) * (1 - 6 * tPrime2) + psiPrime2 * (9 - 68 * tPrime2) + 72 * psiPrime * tPrime2 + 24 * tPrime4)","        lonTerm4 = ((x7 * secLatPrime) / 5040) * (61 + 662 * tPrime2 + 1320 * tPrime4 + 720 * tPrime6)","        lon = (self.oLon * math.pi / 180) + lonTerm1 - lonTerm2 + lonTerm3 - lonTerm4","","        return (lat / (math.pi / 180), lon / (math.pi / 180))"]}]]},"ace":{"folds":[],"scrolltop":1380,"scrollleft":0,"selection":{"start":{"row":58,"column":5},"end":{"row":58,"column":5},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":68,"state":"start","mode":"ace/mode/python"}},"timestamp":1564109125632,"hash":"d1e1e48be44a8e98dd35beb48007409335c8388c"}